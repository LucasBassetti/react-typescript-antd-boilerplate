{"version":3,"sources":["redux/actions/list.tsx","redux/actions/index.tsx","redux/reducers/list.tsx","redux/reducers/index.tsx","redux/api/list.tsx","redux/sagas/list.tsx","redux/sagas/index.tsx","redux/store.tsx","configs/AsyncComponent.tsx","configs/routes.tsx","locales/en/layout/header.tsx","locales/en/screens/home.tsx","locales/en/shared/search_bar.tsx","configs/i18n.tsx","serviceWorker.js","index.tsx"],"names":["fetchList","dispatch","Promise","resolve","reject","type","payload","__webpack_require__","d","__webpack_exports__","INITIAL_STATE","data","fetching","combineReducers","list","state","arguments","length","undefined","_ref","FETCH_LIST_REQUEST","Object","objectSpread","FETCH_LIST_SUCCESS","FETCH_LIST_FAILURE","error","routing","routerReducer","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setTimeout","sent","abrupt","stop","apply","this","sagas_list","takeLatest","_ref$payload","call","API","put","t0","_marked","rootSaga","all","toConsumableArray","listSagas","sagas_marked","sagaMiddleware","createSagaMiddleware","middleware","thunk","store","createStore","reducers","compose","applyMiddleware","history","syncHistoryWithStore","browserHistory","run","sagas","importComponent","Home","e","then","bind","props","_useState","useState","_useState2","slicedToArray","component","setComponent","useEffect","_fetchComponent","default","fetchComponent","C","react_default","createElement","publicRoutes","path","map","objectWithoutProperties","es","assign","key","header","title","home","githubLink","loading","search_bar","currentLocation","findATable","location","people","person","i18n","use","initReactI18next","init","resources","en","fallbackLng","ns","defaultNS","debug","interpolation","escapeValue","react","wait","bindI18n","err","t","Boolean","window","hostname","match","ReactDOM","render","react_redux_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7697d25.chunk.js","sourcesContent":["import store from '../store';\n\nexport const FETCH_LIST_REQUEST: 'FETCH_LIST_REQUEST' = 'FETCH_LIST_REQUEST';\nexport const FETCH_LIST_SUCCESS: 'FETCH_LIST_SUCCESS' = 'FETCH_LIST_SUCCESS';\nexport const FETCH_LIST_FAILURE: 'FETCH_LIST_FAILURE' = 'FETCH_LIST_FAILURE';\n\nexport const fetchList = (): Function => (dispatch: Function): Promise<void> =>\n  new Promise(\n    (resolve: Function, reject: Function): void => {\n      dispatch({\n        type: FETCH_LIST_REQUEST,\n        payload: { resolve, reject }\n      });\n    }\n  );\n","export * from './list';\n","import { FETCH_LIST_REQUEST, FETCH_LIST_SUCCESS, FETCH_LIST_FAILURE } from '../actions';\n\ntype State = {\n  data: string[];\n  fetching: boolean;\n};\n\ntype Props = {\n  type: string;\n  payload: any;\n};\n\nconst INITIAL_STATE: State = { data: [], fetching: true };\n\nexport default (state = INITIAL_STATE, { type, payload }: Props) => {\n  switch (type) {\n    case FETCH_LIST_REQUEST:\n      return { ...state, fetching: true };\n    case FETCH_LIST_SUCCESS:\n      return { ...state, fetching: false, data: payload };\n    case FETCH_LIST_FAILURE:\n      return { ...state, fetching: false, error: payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\nimport list from './list';\n\nexport default combineReducers({\n  list,\n  routing: routerReducer\n});\n","export const fetchList = async (): Promise<string[]> => {\n  const list: string[] = await new Promise(resolve => {\n    setTimeout(() => {\n      resolve(['item1', 'item2', 'item3']);\n    }, 1000);\n  });\n\n  return list;\n};\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { FETCH_LIST_REQUEST, FETCH_LIST_SUCCESS, FETCH_LIST_FAILURE } from '../actions';\nimport * as API from '../api';\n\nexport default [takeLatest(FETCH_LIST_REQUEST, fetchList)];\n\ntype ListAction = {\n  type: string;\n  payload: {\n    resolve: Function;\n    reject: Function;\n  };\n};\n\nfunction* fetchList({ payload: { resolve, reject } }: ListAction) {\n  try {\n    const list: string[] = yield call(API.fetchList);\n\n    resolve(list);\n\n    yield put({ type: FETCH_LIST_SUCCESS, payload: list });\n  } catch (error) {\n    reject(error);\n\n    yield put({ type: FETCH_LIST_FAILURE, payload: error });\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport listSagas from './list';\n\nexport default function* rootSaga() {\n  yield all([...listSagas]);\n}\n","import { browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [thunk, sagaMiddleware];\n\nconst store = createStore(reducers, compose(applyMiddleware(...middleware)));\nconst history = syncHistoryWithStore(browserHistory, store);\n\nsagaMiddleware.run(sagas);\n\nexport { history };\n\nexport default store;\n","import React, { useState, useEffect } from 'react';\n\nexport default (importComponent: any) => (props: any) => {\n  const [component, setComponent] = useState(null);\n\n  useEffect(() => {\n    async function fetchComponent() {\n      const { default: component } = await importComponent();\n\n      setComponent(() => component);\n    }\n\n    fetchComponent();\n  }, []);\n\n  const C: any = component;\n\n  return C ? <C {...props} /> : null;\n};\n","import React from 'react';\nimport { Router, Route, IndexRoute } from 'react-router';\nimport { Provider } from 'react-redux';\nimport AsyncComponent from './AsyncComponent';\nimport store, { history } from '../redux/store';\n\nconst Home = AsyncComponent(() => import('../screens/home/Home'));\n\nconst publicPaths = [{ path: '', component: Home }];\n\nconst publicRoutes = publicPaths.map(({ path, ...props }) => (\n  <Route key={path} path={path} {...props} />\n));\n\nexport default () => (\n  <Provider store={store}>\n    <Router history={history}>\n      <Route path=\"/\">\n        <IndexRoute component={Home} />\n        {publicRoutes}\n      </Route>\n    </Router>\n    {/* <Route component={NotFound} /> */}\n  </Provider>\n);\n","export default {\n  title: 'React TypeScript Ant Design Boilerplate'\n};\n","export default {\n  githubLink: 'Github Link',\n  loading: 'Loading...',\n  title: 'Example'\n};\n","export default {\n  currentLocation: 'Current Location',\n  findATable: 'Find a Table',\n  loading: 'Loading...',\n  location: 'Location',\n  people: 'People',\n  person: 'Person'\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport * as en from '../locales/en';\n\nlet translate: any;\n\ni18n.use(initReactI18next).init(\n  {\n    resources: {\n      en\n    },\n    fallbackLng: 'en',\n\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    debug: false,\n\n    interpolation: {\n      escapeValue: false // not needed for react!!\n    },\n\n    react: {\n      wait: true,\n      bindI18n: 'languageChanged loaded'\n    }\n  },\n  (err, t) => {\n    translate = t;\n  }\n);\n\nexport { translate as t };\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './configs/routes';\nimport './configs/i18n';\nimport * as serviceWorker from './serviceWorker';\nimport './index.less';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}